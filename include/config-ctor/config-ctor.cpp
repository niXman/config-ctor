
// Copyright (c) 2014-2019 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of CONFIG-CTOR(https://github.com/niXman/config-ctor) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifdef _WIN32
#   include <windows.h>
#endif // _WIN32

#ifdef _MSC_VER
#   include <direct.h>
#   include <process.h>
#else
#   include <unistd.h>
#endif // _MSC_VER

#include <stdlib.h>

#include <string>

#ifdef CONFIG_CTOR_HEADER_ONLY
#   define __CONFIGCTOR_INLINE inline
#else
#   define __CONFIGCTOR_INLINE
#endif // CONFIG_CTOR_HEADER_ONLY

namespace config_ctor {
namespace detail {

__CONFIGCTOR_INLINE std::string get_procpath() {
    char buf[1024] = "\0";
#ifdef _WIN32
    ::GetModuleFileNameA(nullptr, buf, sizeof(buf)-1);
#elif defined(__linux__) || defined(__APPLE__)
    if ( ::readlink("/proc/self/exe", buf, sizeof(buf)-1) == -1 )
        return "";
#else
#   error UNKNOWN HOST
#endif
    return buf;
}

__CONFIGCTOR_INLINE std::string get_procname() {
    const std::string procpath = get_procpath();
#ifdef _WIN32
    const std::size_t p = procpath.rfind('\\');
#elif defined(__linux__) || defined(__APPLE__)
    const std::size_t p = procpath.rfind('/');
#else
#   error UNKNOWN HOST
#endif
    return p != std::string::npos ? procpath.substr(p+1) : procpath;
}

} // ns detail
} // ns config_ctor
